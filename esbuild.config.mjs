
import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        ...builtins],
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    define: {
        global: "globalThis",
    },
    plugins: [
        {
            name: 'node-polyfills',
            setup(build) {
                // Polyfill fs module
                build.onResolve({ filter: /^fs$/ }, () => {
                    return { path: 'fs', namespace: 'node-polyfill' }
                })
                
                build.onLoad({ filter: /.*/, namespace: 'node-polyfill' }, (args) => {
                    if (args.path === 'fs') {
                        return {
                            contents: `
                                // Mock fs module for browser environment
                                module.exports = {
                                    readFileSync: function() {
                                        throw new Error('fs.readFileSync not available in browser environment');
                                    },
                                    writeFileSync: function() {
                                        throw new Error('fs.writeFileSync not available in browser environment');
                                    },
                                    existsSync: function() {
                                        return false;
                                    },
                                    statSync: function() {
                                        throw new Error('fs.statSync not available in browser environment');
                                    }
                                };
                            `
                        }
                    }
                })

                // Handle other Node.js modules that PDFKit might need
                build.onResolve({ filter: /^path$/ }, () => {
                    return { path: 'path', namespace: 'node-polyfill' }
                })

                build.onLoad({ filter: /^path$/, namespace: 'node-polyfill' }, () => {
                    return {
                        contents: `
                            module.exports = {
                                join: function(...args) {
                                    return args.join('/').replace(/\/+/g, '/');
                                },
                                resolve: function(...args) {
                                    return args.join('/').replace(/\/+/g, '/');
                                },
                                dirname: function(path) {
                                    return path.split('/').slice(0, -1).join('/') || '/';
                                },
                                basename: function(path) {
                                    return path.split('/').pop() || '';
                                },
                                extname: function(path) {
                                    const parts = path.split('.');
                                    return parts.length > 1 ? '.' + parts.pop() : '';
                                }
                            };
                        `
                    }
                })
            }
        }
    ],
});

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}
